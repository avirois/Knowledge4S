pipeline {
    agent {
        docker {
            image 'python:3.9.2-alpine3.12'
            args '-u root:root'
        }
    }

    stages {
        stage('build') {
            steps {
                sh '''
                # install wget and firefox 
                apk --no-cache add wget firefox 
                # cryptography dependencies
                apk add gcc musl-dev python3-dev libffi-dev openssl-dev cargo
                # download geckodriver.tar.gz
                wget https://github.com/mozilla/geckodriver/releases/download/v0.29.0/geckodriver-v0.29.0-linux64.tar.gz
                # extract geckodriver 
                tar -xf geckodriver-v0.29.0-linux64.tar.gz  
                # create python venv
                python -m venv venv
                # install requirements.txt
                source venv/bin/activate
                pip install -r requirements.txt
                '''
            }
        }
        stage('unit-test') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    sh '''
                    # create GECKODRIVER_PATH env variable
                    export GECKODRIVER_PATH=$(pwd)'/geckodriver'
                    # run test
                    source venv/bin/activate && pytest --junitxml=out_report_unit.xml -k "test_unit"
                    '''
                }
            }   
        }
        stage('integration-test') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    sh '''
                    # create GECKODRIVER_PATH env variable
                    export GECKODRIVER_PATH=$(pwd)'/geckodriver'
                    # run test
                    source venv/bin/activate && pytest --junitxml=out_report_integration.xml -k "test_integration"
                    '''
                }
            }   
        }
        stage('report') {
            steps {
                sh '''
                source venv/bin/activate && python xml_report.py
                '''
            }   
        }
    }
}
